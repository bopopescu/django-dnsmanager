# Generated by Django 2.2.8 on 2019-12-15 10:54

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import dnsmanager.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', dnsmanager.fields.RecordNameField(blank=True, verbose_name='name')),
                ('dns_class', models.CharField(choices=[('IN', 'IN (Internet)'), ('CS', 'CS (CSNET, obsolete)'), ('CH', 'CH (CHAOS)'), ('HS', 'HS (Hesiod)')], default='IN', help_text="You shouldn't need anything else than IN.", max_length=2, verbose_name='class')),
                ('ttl', models.PositiveIntegerField(default=3600, help_text='Limits the lifetime of this record.', null=True, verbose_name='Time To Live')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_dnsmanager.record_set+', to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'record',
                'verbose_name_plural': 'records',
                'ordering': ['zone', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', dnsmanager.fields.DomainNameField(unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'zone',
                'verbose_name_plural': 'zones',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AddressRecord',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dnsmanager.Record')),
                ('address', models.GenericIPAddressField(protocol='IPv4', verbose_name='IPv4 address')),
            ],
            options={
                'verbose_name': 'A record',
                'verbose_name_plural': 'A records',
            },
            bases=('dnsmanager.record',),
        ),
        migrations.CreateModel(
            name='CanonicalNameRecord',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dnsmanager.Record')),
                ('c_name', dnsmanager.fields.RecordNameField(help_text='This domain name will alias to this canonical name.', verbose_name='canonical name')),
            ],
            options={
                'verbose_name': 'CNAME record',
                'verbose_name_plural': 'CNAME records',
                'ordering': ['c_name'],
            },
            bases=('dnsmanager.record',),
        ),
        migrations.CreateModel(
            name='Ipv6AddressRecord',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dnsmanager.Record')),
                ('address', models.GenericIPAddressField(protocol='IPv6', verbose_name='IPv6 address')),
            ],
            options={
                'verbose_name': 'AAAA record',
                'verbose_name_plural': 'AAAA records',
            },
            bases=('dnsmanager.record',),
        ),
        migrations.CreateModel(
            name='MailExchangeRecord',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dnsmanager.Record')),
                ('preference', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)], verbose_name='preference')),
                ('exchange', dnsmanager.fields.DomainNameField(default='@', verbose_name='exchange server')),
            ],
            options={
                'verbose_name': 'MX record',
                'verbose_name_plural': 'MX records',
                'ordering': ['preference'],
            },
            bases=('dnsmanager.record',),
        ),
        migrations.CreateModel(
            name='NameServerRecord',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dnsmanager.Record')),
                ('nsdname', dnsmanager.fields.DomainNameField(default='@', verbose_name='name server')),
            ],
            options={
                'verbose_name': 'NS record',
                'verbose_name_plural': 'NS records',
                'ordering': ['nsdname'],
            },
            bases=('dnsmanager.record',),
        ),
        migrations.CreateModel(
            name='PointerRecord',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dnsmanager.Record')),
                ('ptrdname', dnsmanager.fields.DomainNameField(verbose_name='pointer domain name')),
            ],
            options={
                'verbose_name': 'PTR record',
                'verbose_name_plural': 'PTR records',
                'ordering': ['ptrdname'],
            },
            bases=('dnsmanager.record',),
        ),
        migrations.CreateModel(
            name='ServiceRecord',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dnsmanager.Record')),
                ('priority', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)], verbose_name='priority')),
                ('weight', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)], verbose_name='weight')),
                ('port', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='port')),
                ('target', dnsmanager.fields.DomainNameField(verbose_name='target')),
            ],
            options={
                'verbose_name': 'SRV record',
                'verbose_name_plural': 'SRV records',
                'ordering': ['priority', 'target'],
            },
            bases=('dnsmanager.record',),
        ),
        migrations.CreateModel(
            name='StartOfAuthorityRecord',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dnsmanager.Record')),
                ('mname', dnsmanager.fields.DomainNameField(verbose_name='main name server')),
                ('rname', models.EmailField(max_length=254, verbose_name='responsible email')),
                ('serial', models.BigIntegerField()),
                ('refresh', models.BigIntegerField()),
                ('retry', models.BigIntegerField()),
                ('expire', models.BigIntegerField()),
                ('minimum', models.BigIntegerField()),
            ],
            options={
                'verbose_name': 'SOA record',
                'verbose_name_plural': 'SOA records',
                'ordering': ['mname'],
            },
            bases=('dnsmanager.record',),
        ),
        migrations.CreateModel(
            name='TextRecord',
            fields=[
                ('record_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dnsmanager.Record')),
                ('data', models.TextField()),
            ],
            options={
                'verbose_name': 'TXT record',
                'verbose_name_plural': 'TXT records',
            },
            bases=('dnsmanager.record',),
        ),
        migrations.AddField(
            model_name='record',
            name='zone',
            field=models.ForeignKey(help_text='This record will be applied on that zone.', on_delete=django.db.models.deletion.CASCADE, to='dnsmanager.Zone', verbose_name='zone'),
        ),
    ]
